{
  "HED": {
    "name": "HED",
    "description": "Hierarchical Event Descriptor (HED) Tag.\nSee [Appendix III](SPEC_ROOT/99-appendices/03-hed.md) for details.\n",
    "type": "string"
  },
  "abbreviation": {
    "name": "abbreviation",
    "description": "The unique label abbreviation\n",
    "type": "string"
  },
  "acq_time__scans": {
    "name": "acq_time",
    "description": "Acquisition time refers to when the first data point in each run was acquired.\nFurthermore, if this header is provided, the acquisition times of all files\nfrom the same recording MUST be identical.\nDatetime format and their anonymization are described in\n[Units](SPEC_ROOT/02-common-principles.md#units).\n",
    "type": "string",
    "format": "datetime"
  },
  "acq_time__sessions": {
    "name": "acq_time",
    "description": "Acquisition time refers to when the first data point of the first run was acquired.\nDatetime format and their anonymization are described in\n[Units](SPEC_ROOT/02-common-principles.md#units).\n",
    "type": "string",
    "format": "datetime"
  },
  "age": {
    "name": "age",
    "description": "Numeric value in years (float or integer value).\n",
    "type": "number",
    "unit": "year"
  },
  "cardiac": {
    "name": "cardiac",
    "description": "continuous pulse measurement\n",
    "type": "number"
  },
  "color": {
    "name": "color",
    "description": "Hexadecimal. Label color for visualization.\n",
    "type": "string",
    "unit": "hexadecimal"
  },
  "derived_from": {
    "name": "derived_from",
    "description": "`sample-<label>` key/value pair from which a sample is derived,\nfor example a slice of tissue (`sample-02`) derived from a block of tissue (`sample-01`).\n",
    "type": "string",
    "pattern": "^sample-[0-9a-zA-Z]+$"
  },
  "description": {
    "name": "description",
    "description": "Brief free-text description of the channel, or other information of interest.\n",
    "type": "string"
  },
  "dimension": {
    "name": "dimension",
    "description": "Size of the group (grid/strip/probe) that this electrode belongs to.\nMust be of form `[AxB]` with the smallest dimension first (for example, `[1x8]`).\n",
    "type": "string"
  },
  "duration": {
    "name": "duration",
    "description": "Duration of the event (measured from onset) in seconds.\nMust always be either zero or positive (or `n/a` if unavailable).\nA \"duration\" value of zero implies that the delta function or event is so\nshort as to be effectively modeled as an impulse.\n",
    "anyOf": [
      {
        "type": "number",
        "unit": "s",
        "minimum": 0
      },
      {
        "type": "string",
        "enum": [
          "n/a"
        ]
      }
    ]
  },
  "filename": {
    "name": "filename",
    "description": "Relative paths to files.\n",
    "type": "string",
    "format": "participant_relative"
  },
  "group": {
    "name": "group",
    "description": "Which group of channels (grid/strip/seeg/depth) this channel belongs to.\nThis is relevant because one group has one cable-bundle and noise can be shared.\nThis can be a name or number.\n",
    "anyOf": [
      {
        "type": "string"
      },
      {
        "type": "number"
      }
    ]
  },
  "handedness": {
    "name": "handedness",
    "description": "String value indicating one of \"left\", \"right\", \"ambidextrous\".\n\nFor \"left\", use one of these values: `left`, `l`, `L`, `LEFT`, `Left`.\n\nFor \"right\", use one of these values: `right`, `r`, `R`, `RIGHT`, `Right`.\n\nFor \"ambidextrous\", use one of these values: `ambidextrous`, `a`, `A`, `AMBIDEXTROUS`,\n`Ambidextrous`.\n",
    "type": "string",
    "enum": [
      "left",
      "l",
      "L",
      "LEFT",
      "Left",
      "right",
      "r",
      "R",
      "RIGHT",
      "Right",
      "ambidextrous",
      "a",
      "A",
      "AMBIDEXTROUS",
      "Ambidextrous",
      "n/a"
    ]
  },
  "hemisphere": {
    "name": "hemisphere",
    "description": "The hemisphere in which the electrode is placed.\n",
    "type": "string",
    "enum": [
      "L",
      "R"
    ]
  },
  "high_cutoff": {
    "name": "high_cutoff",
    "description": "Frequencies used for the low-pass filter applied to the channel in Hz.\nIf no low-pass filter applied, use `n/a`.\nNote that hardware anti-aliasing in A/D conversion of all MEG/EEG electronics\napplies a low-pass filter; specify its frequency here if applicable.\n",
    "anyOf": [
      {
        "type": "number",
        "unit": "Hz",
        "minimum": 0
      },
      {
        "type": "string",
        "enum": [
          "n/a"
        ]
      }
    ]
  },
  "hplc_recovery_fractions": {
    "name": "hplc_recovery_fractions",
    "description": "HPLC recovery fractions (the fraction of activity that gets loaded onto the HPLC).\n",
    "type": "number",
    "unit": "arbitrary"
  },
  "impedance": {
    "name": "impedance",
    "description": "Impedance of the electrode, units MUST be in `kOhm`.\n",
    "type": "number",
    "unit": "kOhm"
  },
  "index": {
    "name": "index",
    "description": "The label integer index.\n",
    "type": "integer"
  },
  "low_cutoff": {
    "name": "low_cutoff",
    "description": "Frequencies used for the high-pass filter applied to the channel in Hz.\nIf no high-pass filter applied, use `n/a`.\n",
    "anyOf": [
      {
        "type": "number",
        "unit": "Hz"
      },
      {
        "type": "string",
        "enum": [
          "n/a"
        ]
      }
    ]
  },
  "manufacturer": {
    "name": "manufacturer",
    "description": "The manufacturer for each electrode.\nCan be used if electrodes were manufactured by more than one company.\n",
    "type": "string"
  },
  "mapping": {
    "name": "mapping",
    "description": "Corresponding integer label in the standard BIDS label lookup.\n",
    "type": "integer"
  },
  "material": {
    "name": "material",
    "description": "Material of the electrode (for example, `Tin`, `Ag/AgCl`, `Gold`).\n",
    "type": "string"
  },
  "metabolite_parent_fraction": {
    "name": "metabolite_parent_fraction",
    "description": "Parent fraction of the radiotracer (0-1).\n",
    "type": "number",
    "minimum": 0,
    "maximum": 1
  },
  "metabolite_polar_fraction": {
    "name": "metabolite_polar_fraction",
    "description": "Polar metabolite fraction of the radiotracer (0-1).\n",
    "type": "number",
    "minimum": 0,
    "maximum": 1
  },
  "name__channels": {
    "name": "name",
    "description": "Label of the channel.\n",
    "type": "string"
  },
  "name__electrodes": {
    "name": "name",
    "description": "Name of the electrode contact point.\n",
    "type": "string"
  },
  "name__segmentations": {
    "name": "name",
    "description": "The unique label name.\n",
    "type": "string"
  },
  "notch": {
    "name": "notch",
    "description": "Frequencies used for the notch filter applied to the channel, in Hz.\nIf no notch filter applied, use `n/a`.\n",
    "anyOf": [
      {
        "type": "number",
        "unit": "Hz"
      },
      {
        "type": "string",
        "enum": [
          "n/a"
        ]
      }
    ]
  },
  "onset": {
    "name": "onset",
    "description": "Onset (in seconds) of the event, measured from the beginning of the acquisition\nof the first data point stored in the corresponding task data file.\nNegative onsets are allowed, to account for events that occur prior to the first\nstored data point.\nFor example, in case there is an in-scanner training phase that begins before\nthe scanning sequence has started events from this sequence should have\nnegative onset time counting down to the beginning of the acquisition of the\nfirst volume.\n\nIf any data points have been discarded before forming the data file\n(for example, \"dummy volumes\" in BOLD fMRI),\na time of 0 corresponds to the first stored data point and not the first\nacquired data point.\n",
    "type": "number",
    "unit": "s"
  },
  "pathology": {
    "name": "pathology",
    "description": "String value describing the pathology of the sample or type of control.\nWhen different from `healthy`, pathology SHOULD be specified.\nThe pathology may be specified in either `samples.tsv` or\n`sessions.tsv`, depending on whether the pathology changes over time.\n",
    "type": "string"
  },
  "participant_id": {
    "name": "participant_id",
    "description": "A participant identifier of the form `sub-<label>`,\nmatching a participant entity found in the dataset.\n",
    "type": "string",
    "pattern": "^sub-[0-9a-zA-Z]+$"
  },
  "plasma_radioactivity": {
    "name": "plasma_radioactivity",
    "description": "Radioactivity in plasma, in unit of plasma radioactivity (for example, `kBq/mL`).\n",
    "type": "number"
  },
  "reference__eeg": {
    "name": "reference",
    "description": "Name of the reference electrode(s).\nThis column is not needed when it is common to all channels.\nIn that case the reference electrode(s) can be specified in `*_eeg.json` as `EEGReference`).\n",
    "type": "string"
  },
  "reference__ieeg": {
    "name": "reference",
    "description": "Specification of the reference (for example, `mastoid`, `ElectrodeName01`, `intracranial`, `CAR`, `other`, `n/a`).\nIf the channel is not an electrode channel (for example, a microphone channel) use `n/a`.\n",
    "anyOf": [
      {
        "type": "string"
      },
      {
        "type": "string",
        "enum": [
          "n/a"
        ]
      }
    ]
  },
  "respiratory": {
    "name": "respiratory",
    "description": "continuous breathing measurement\n",
    "type": "number"
  },
  "response_time": {
    "name": "response_time",
    "description": "Response time measured in seconds.\nA negative response time can be used to represent preemptive responses and\n`n/a` denotes a missed response.\n",
    "anyOf": [
      {
        "type": "number",
        "unit": "s"
      },
      {
        "type": "string",
        "enum": [
          "n/a"
        ]
      }
    ]
  },
  "sample": {
    "name": "sample",
    "description": "Onset of the event according to the sampling scheme of the recorded modality\n(that is, referring to the raw data file that the `events.tsv` file accompanies).\n",
    "type": "integer"
  },
  "sample_id": {
    "name": "sample_id",
    "description": "A sample identifier of the form `sample-<label>`,\nmatching a sample entity found in the dataset.\n",
    "type": "string",
    "pattern": "^sample-[0-9a-zA-Z]+$"
  },
  "sample_type": {
    "name": "sample_type",
    "description": "Biosample type defined by\n[ENCODE Biosample Type](https://www.encodeproject.org/profiles/biosample_type).\n",
    "type": "string",
    "enum": [
      "cell line",
      "in vitro differentiated cells",
      "primary cell",
      "cell-free sample",
      "cloning host",
      "tissue",
      "whole organisms",
      "organoid",
      "technical sample"
    ]
  },
  "sampling_frequency": {
    "name": "sampling_frequency",
    "description": "Sampling rate of the channel in Hz.\n",
    "type": "number",
    "unit": "Hz"
  },
  "session_id": {
    "name": "session_id",
    "description": "A session identifier of the form `ses-<label>`,\nmatching a session found in the dataset.\n",
    "type": "string",
    "pattern": "^ses-[0-9a-zA-Z]+$"
  },
  "sex": {
    "name": "sex",
    "description": "String value indicating phenotypical sex, one of \"male\", \"female\", \"other\".\n\nFor \"male\", use one of these values: `male`, `m`, `M`, `MALE`, `Male`.\n\nFor \"female\", use one of these values: `female`, `f`, `F`, `FEMALE`, `Female`.\n\nFor \"other\", use one of these values: `other`, `o`, `O`, `OTHER`, `Other`.\n",
    "type": "string",
    "enum": [
      "male",
      "m",
      "M",
      "MALE",
      "Male",
      "female",
      "f",
      "F",
      "FEMALE",
      "Female",
      "other",
      "o",
      "O",
      "OTHER",
      "Other",
      "n/a"
    ]
  },
  "size": {
    "name": "size",
    "description": "Surface area of the electrode, units MUST be in `mm^2`.\n",
    "type": "number",
    "unit": "mm2"
  },
  "software_filters": {
    "name": "software_filters",
    "description": "List of temporal and/or spatial software filters applied\n(for example, `SSS`, `SpatialCompensation`).\nNote that parameters should be defined in the general MEG sidecar .json file.\nIndicate `n/a` in the absence of software filters applied.\n",
    "anyOf": [
      {
        "type": "string"
      },
      {
        "type": "string",
        "enum": [
          "n/a"
        ]
      }
    ]
  },
  "species": {
    "name": "species",
    "description": "The `species` column SHOULD be a binomial species name from the\n[NCBI Taxonomy](https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi)\n(for example, `homo sapiens`, `mus musculus`, `rattus norvegicus`).\nFor backwards compatibility, if `species` is absent, the participant is assumed to be\n`homo sapiens`.\n",
    "type": "string"
  },
  "status": {
    "name": "status",
    "description": "Data quality observed on the channel.\nA channel is considered `bad` if its data quality is compromised by excessive noise.\nIf quality is unknown, then a value of `n/a` may be used.\nDescription of noise type SHOULD be provided in `[status_description]`.\n",
    "type": "string",
    "enum": [
      "good",
      "bad",
      "n/a"
    ]
  },
  "status_description": {
    "name": "status_description",
    "description": "Freeform text description of noise or artifact affecting data quality on the channel.\nIt is meant to explain why the channel was declared bad in `[status]`.\n",
    "type": "string"
  },
  "stim_file": {
    "name": "stim_file",
    "description": "Represents the location of the stimulus file (such as an image, video, or\naudio file) presented at the given onset time.\nThere are no restrictions on the file formats of the stimuli files,\nbut they should be stored in the `/stimuli` directory\n(under the root directory of the dataset; with optional subdirectories).\nThe values under the `stim_file` column correspond to a path relative to\n`/stimuli`.\nFor example `images/cat03.jpg` will be translated to `/stimuli/images/cat03.jpg`.\n",
    "type": "string",
    "format": "stimuli_relative"
  },
  "strain": {
    "name": "strain",
    "description": "For species different from `homo sapiens`, string value indicating\nthe strain of the species, for example: `C57BL/6J`.\n",
    "type": "string"
  },
  "strain_rrid": {
    "name": "strain_rrid",
    "description": "For species different from `homo sapiens`, research resource identifier\n([RRID](https://scicrunch.org/resources/Organisms/search))\nof the strain of the species, for example: `RRID:IMSR_JAX:000664`.\n",
    "type": "string",
    "format": "rrid"
  },
  "time": {
    "name": "time",
    "description": "Time, in seconds, relative to `TimeZero` defined by the `*_pet.json`.\nFor example, 5.\n",
    "type": "number",
    "unit": "s"
  },
  "trial_type": {
    "name": "trial_type",
    "description": "Primary categorisation of each trial to identify them as instances of the\nexperimental conditions.\nFor example: for a response inhibition task, it could take on values `go` and\n`no-go` to refer to response initiation and response inhibition experimental\nconditions.\n",
    "type": "string"
  },
  "trigger": {
    "name": "trigger",
    "description": "continuous measurement of the scanner trigger signal\n",
    "type": "number"
  },
  "type__eeg_channels": {
    "name": "type",
    "description": "Type of channel; MUST use the channel types listed below.\nNote that the type MUST be in upper-case.\n",
    "type": "string",
    "enum": [
      "AUDIO",
      "EEG",
      "EOG",
      "ECG",
      "EMG",
      "EYEGAZE",
      "GSR",
      "HEOG",
      "MISC",
      "PPG",
      "PUPIL",
      "REF",
      "RESP",
      "SYSCLOCK",
      "TEMP",
      "TRIG",
      "VEOG"
    ]
  },
  "type__meg_channels": {
    "name": "type",
    "description": "Type of channel; MUST use the channel types listed below.\nNote that the type MUST be in upper-case.\n",
    "type": "string",
    "enum": [
      "MEGMAG",
      "MEGGRADAXIAL",
      "MEGGRADPLANAR",
      "MEGREFMAG",
      "MEGREFGRADAXIAL",
      "MEGREFGRADPLANAR",
      "MEGOTHER",
      "EEG",
      "ECOG",
      "SEEG",
      "DBS",
      "VEOG",
      "HEOG",
      "EOG",
      "ECG",
      "EMG",
      "TRIG",
      "AUDIO",
      "PD",
      "EYEGAZE",
      "PUPIL",
      "MISC",
      "SYSCLOCK",
      "ADC",
      "DAC",
      "HLU",
      "FITERR",
      "OTHER"
    ]
  },
  "type__ieeg_channels": {
    "name": "type",
    "description": "Type of channel; MUST use the channel types listed below.\nNote that the type MUST be in upper-case.\n",
    "type": "string",
    "enum": [
      "EEG",
      "ECOG",
      "SEEG",
      "DBS",
      "VEOG",
      "HEOG",
      "EOG",
      "ECG",
      "EMG",
      "TRIG",
      "AUDIO",
      "PD",
      "EYEGAZE",
      "PUPIL",
      "MISC",
      "SYSCLOCK",
      "ADC",
      "DAC",
      "REF",
      "OTHER"
    ]
  },
  "type__electrodes": {
    "name": "type",
    "description": "Type of the electrode (for example, cup, ring, clip-on, wire, needle).\n",
    "type": "string"
  },
  "units": {
    "name": "units",
    "description": "Physical unit of the value represented in this channel,\nfor example, `V` for Volt, or `fT/cm` for femto Tesla per centimeter\n(see [Units](SPEC_ROOT/02-common-principles.md#units)).\n",
    "type": "string",
    "format": "unit"
  },
  "value": {
    "name": "value",
    "description": "Marker value associated with the event (for example, the value of a TTL\ntrigger that was recorded at the onset of the event).\n",
    "anyOf": [
      {
        "type": "number"
      },
      {
        "type": "string"
      }
    ]
  },
  "volume_type": {
    "name": "volume_type",
    "description": "The `*_aslcontext.tsv` table consists of a single column of labels identifying\nthe `volume_type` of each volume in the corresponding `*_asl.nii[.gz]` file.\n",
    "type": "string",
    "enum": [
      "control",
      "label",
      "m0scan",
      "deltam",
      "cbf"
    ]
  },
  "whole_blood_radioactivity": {
    "name": "whole_blood_radioactivity",
    "description": "Radioactivity in whole blood samples,\nin unit of radioactivity measurements in whole blood samples (for example, `kBq/mL`).\n",
    "type": "number"
  },
  "x": {
    "name": "x",
    "description": "Recorded position along the x-axis.\n",
    "type": "number"
  },
  "y": {
    "name": "y",
    "description": "Recorded position along the y-axis.\n",
    "type": "number"
  },
  "z": {
    "name": "z",
    "description": "Recorded position along the z-axis.\n",
    "anyOf": [
      {
        "type": "number"
      },
      {
        "type": "string",
        "enum": [
          "n/a"
        ]
      }
    ]
  }
}