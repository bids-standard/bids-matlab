function test_suite = test_keep_file %#ok<*STOUT>
  try % assignment of 'localfunctions' is necessary in Matlab >= 2016
    test_functions = localfunctions(); %#ok<*NASGU>
  catch % no problem; early Matlab versions can use initTestSuite fine
  end
  initTestSuite;

end

function test_keep_file_exclude_prefix()

  file_struct = struct('suffix', 'bold', ...
                       'ext', '.nii.gz', ...
                       'entities', struct('task', 'balloon', ...
                                          'ses', '01', ...
                                          'sub', '02', ...
                                          'acq', 'fullbrain', ...
                                          'rec', ''), ...
                       'prefix', '');

  options = {'prefix', {''}
             'ses', {'01'}
             'rec', {''}};
  assertEqual(bids.internal.keep_file_for_query(file_struct, options), true);

end

function test_keep_file_exclude_based_on_modality()

  file_struct = struct('modality', 'func', ...
                       'suffix', 'bold', ...
                       'ext', '.nii.gz', ...
                       'entities', struct('task', 'balloon', ...
                                          'ses', '01', ...
                                          'sub', '02', ...
                                          'acq', 'fullbrain', ...
                                          'rec', ''), ...
                       'prefix', 'swau');

  options = {'modality', {'anat'}};
  assertEqual(bids.internal.keep_file_for_query(file_struct, options), false);

end

function test_keep_file_basic()

  cfg = set_test_cfg();

  file_struct = struct('suffix', 'bold', ...
                       'ext', '.nii.gz', ...
                       'entities', struct('task', 'balloon', ...
                                          'ses', '01', ...
                                          'sub', '02', ...
                                          'acq', 'fullbrain'), ...
                       'prefix', 'swau');

  options_and_expected_result = {{'suffix', {'bold'}; 'prefix', {''}}                 false; ...
                                 {'ses', {'01'}},                                     true; ...
                                 {'ses', {'02'}},                                     false; ...
                                 {'ses', {'01'}; 'acq', {'frontal'}},                 false; ...
                                 {'ses', {'01', '02'}},                               true; ...
                                 {'suffix', {'T1w'}},                                 false; ...
                                 {'suffix', {'bold'}},                                true; ...
                                 {'suffix', {'bold'}; 'extension', {'^.nii$'}},       false; ...
                                 {'suffix', {'T1w', 'bold'}},                         true; ...
                                 {'sub', {'02'}; 'ses', {'01'}},                      true; ...
                                 {'sub', {'02'}; 'ses', {'02'}}                       false; ...
                                 {'sub', {'02'}; 'ses', {'01'}; 'suffix', {'T1w'}},   false; ...
                                 {'sub', {'02'}; 'task', {'balloon'}},                true };

  for iTest = 1:size(options_and_expected_result, 1)
    options = options_and_expected_result{iTest, 1};
    expected_result = options_and_expected_result{iTest, 2};
    status = bids.internal.keep_file_for_query(file_struct, options);
    assertEqual(status, expected_result);
  end

  file_struct = struct('suffix', 'T1w', ...
                       'entities', struct('ses', '01', ...
                                          'sub', '02'));
  options = {'sub', {'02'}
             'task', {'balloon'}};

  assertEqual(bids.internal.keep_file_for_query(file_struct, options), false);

end

function test_keep_file_regex_suffix_ext_prefix()

  cfg = set_test_cfg();

  file_struct = struct('prefix', 's6wua', ...
                       'suffix', 'bold', ...
                       'ext', '.nii.gz', ...
                       'entities', struct('sub', '02', ...
                                          'task', 'foo', ...
                                          'run', '01'));

  options_and_expected_result = {{'prefix', {'s[0-9].*'}}, true; ...
                                 {'ext',    {'.*nii.*'}},  true; ...
                                 {'ext',    {'^.*nii$'}},  false; ...
                                 {'suffix', {'b.*'}},      true ...
                                };

  for iTest = 1:size(options_and_expected_result, 1)
    options = options_and_expected_result{iTest, 1};
    expected_result = options_and_expected_result{iTest, 2};
    status = bids.internal.keep_file_for_query(file_struct, options);
    assertEqual(status, expected_result);
  end

end

function test_keep_file_regex()

  cfg = set_test_cfg();

  file_struct = struct('suffix', 'bold', ...
                       'ext', '.nii.gz', ...
                       'entities', struct('sub', '02', ...
                                          'task', 'foo', ...
                                          'run', '01', ...
                                          'space', 'myMNI2009'));

  options_and_expected_result = {
                                 {'task',  {'^f.*'}},     true; ...
                                 {'space', {'.*MNI.*'}},  true ...
                                };

  for iTest = 1:size(options_and_expected_result, 1)
    options = options_and_expected_result{iTest, 1};
    expected_result = options_and_expected_result{iTest, 2};
    status = bids.internal.keep_file_for_query(file_struct, options);
    assertEqual(status, expected_result);
  end

end

function test_keep_file_indices()

  %  for {'run', 'flip', 'inv', 'split', 'echo'}

  cfg = set_test_cfg();

  file_struct = struct('suffix', 'bold', ...
                       'ext', '.nii.gz', ...
                       'entities', struct('inv', '10', ...
                                          'flip', '1', ...
                                          'sub', '02', ...
                                          'split', '102', ...
                                          'run', '01', ...
                                          'echo', '3'));

  options_and_expected_result = {{'run',  {1, '2', 3}},   true; ...
                                 {'flip', {2:3}},         false; ...
                                 {'inv',  {8:12}},        true; ...
                                 {'echo', {3}},           true; ...
                                 {'split', {3}},          false ...
                                };

  for iTest = 1:size(options_and_expected_result, 1)
    options = options_and_expected_result{iTest, 1};
    expected_result = options_and_expected_result{iTest, 2};
    status = bids.internal.keep_file_for_query(file_struct, options);
    assertEqual(status, expected_result);
  end

end

function test_keep_file_exclude_entity()

  file_struct = struct('suffix', 'bold', ...
                       'ext', '.nii.gz', ...
                       'entities', struct('task', 'balloon', ...
                                          'ses', '01', ...
                                          'sub', '02', ...
                                          'acq', 'fullbrain', ...
                                          'rec', ''), ...
                       'prefix', 'swau');

  options = {'ses', {'01'}
             'rec', {''}};
  assertEqual(bids.internal.keep_file_for_query(file_struct, options), true);

end

function test_keep_file_events_in_root()

  file_struct = struct('prefix', '', ...
                       'suffix', 'events', ...
                       'ext', '.tsv', ...
                       'entities', struct('task', 'nback'));

  options = {'sub', {'01'}};
  assertEqual(bids.internal.keep_file_for_query(file_struct, options), false);

end
